How to compile: I put Makefile for the compile. Typing "make" at the root directory of the code suite 
               will generate binary at "src" directory.
               
How to run: Type "run.sh"

Subtlety: For convenience, I converted time into seconds to use internally, but as you know this can cause 
          some possible errors from the varying day counts in months. 
          To handle the issue, I utilized a function from internet which transforms a year/month/day into days. 
          (http://stackoverflow.com/questions/7960318/math-to-convert-seconds-since-1970-into-date-and-vice-versa)
          
Explanation on the code: I seperated the median processing into three major mechanisms.
          First part is edgeRepository class. This is to keep all the transactions and to find stale transactions.
          I used priority_queue from STL as a equivalent for the heap.
          Second part is myGraph class. This is to track edges belongs to a node.
          For efficiency, I used unordered_map from STL because the possibility of big sharing is very low, so hashing will be efficient.
          Third part is edgeDegreeStatistics class. I implemented this with vector class of STL which is equivalent to dynamic array.
          The index of array represents the degree of nodes - so nodes with the same number of edges are kept with each index.
          By doing so, we can find median by summing up from the first index of the array.
          This can be efficient because of data characteristic. Majority of nodes will have less than 10 edges, so we can find median fast,
          and at the same time, we can update the changes from the stale transactions fast.
